import { UseMutationOptions } from '@tanstack/react-query';
import { RedirectionSideEffect } from '../../routing';
import { RaRecord, MutationMode, DeleteParams } from '../../types';
/**
 * Prepare a set of callbacks for a delete button
 *
 * @example
 * const DeleteButton = ({
 *     resource,
 *     record,
 *     redirect,
 *     ...rest
 * }) => {
 *     const {
 *         isPending,
 *         handleDelete,
 *     } = useDeleteController({
 *         mutationMode: 'pessimistic',
 *         resource,
 *         record,
 *         redirect,
 *     });
 *
 *     const [open, setOpen] = useState(false);
 *
 *     return (
 *         <Fragment>
 *             <Button
 *                 onClick={() => setOpen(true)}
 *                 label="ra.action.delete"
 *                 {...rest}
 *             >
 *                 {icon}
 *             </Button>
 *             <Confirm
 *                 isOpen={open}
 *                 loading={isPending}
 *                 title="ra.message.delete_title"
 *                 content="ra.message.delete_content"
 *                 titleTranslateOptions={{
 *                     name: resource,
 *                     id: record.id,
 *                 }}
 *                 contentTranslateOptions={{
 *                     name: resource,
 *                     id: record.id,
 *                 }}
 *                 onConfirm={() => handleDelete()}
 *                 onClose={() => setOpen(false)}
 *             />
 *         </Fragment>
 *     );
 * };
 */
export declare const useDeleteController: <RecordType extends RaRecord = any, ErrorType = Error>(props: UseDeleteControllerParams<RecordType, ErrorType>) => UseDeleteControllerReturn;
export interface UseDeleteControllerParams<RecordType extends RaRecord = any, MutationOptionsError = unknown> {
    mutationMode?: MutationMode;
    mutationOptions?: UseMutationOptions<RecordType, MutationOptionsError, DeleteParams<RecordType>>;
    record?: RecordType;
    redirect?: RedirectionSideEffect;
    resource?: string;
    successMessage?: string;
}
export interface UseDeleteControllerReturn {
    isLoading: boolean;
    isPending: boolean;
    handleDelete: () => void;
}
//# sourceMappingURL=useDeleteController.d.ts.map